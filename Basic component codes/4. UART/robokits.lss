
robokits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  008000ca  008000ca  000003b6  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f5  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000398  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cd  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00000d40  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019d  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000130  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_11>
  30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 30       	cpi	r26, 0x0F	; 15
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  8a:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LED1ON>:
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

#define UART_BAUD_RATE	115200

void LED1ON(void) {sbi(PORTC,7);}
  92:	af 9a       	sbi	0x15, 7	; 21
  94:	08 95       	ret

00000096 <LED1OFF>:
void LED1OFF(void){cbi(PORTC,7);}
  96:	af 98       	cbi	0x15, 7	; 21
  98:	08 95       	ret

0000009a <TOGGLELED1>:
void TOGGLELED1(void) {if(bit_is_set(PORTC,7))cbi(PORTC,7); else sbi(PORTC,7);}
  9a:	af 9b       	sbis	0x15, 7	; 21
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <TOGGLELED1+0x8>
  9e:	af 98       	cbi	0x15, 7	; 21
  a0:	08 95       	ret
  a2:	af 9a       	sbi	0x15, 7	; 21
  a4:	08 95       	ret

000000a6 <LED2ON>:

void LED2ON(void) {sbi(PORTC,6);}
  a6:	ae 9a       	sbi	0x15, 6	; 21
  a8:	08 95       	ret

000000aa <LED2OFF>:
void LED2OFF(void) {cbi(PORTC,6);}
  aa:	ae 98       	cbi	0x15, 6	; 21
  ac:	08 95       	ret

000000ae <TOGGLELED2>:
void TOGGLELED2(void) {if(bit_is_set(PORTC,6))cbi(PORTC,6); else sbi(PORTC,6);}
  ae:	ae 9b       	sbis	0x15, 6	; 21
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <TOGGLELED2+0x8>
  b2:	ae 98       	cbi	0x15, 6	; 21
  b4:	08 95       	ret
  b6:	ae 9a       	sbi	0x15, 6	; 21
  b8:	08 95       	ret

000000ba <SWITCH1ON>:

char SWITCH1ON(void) {return(bit_is_clear(PIND,6));}
  ba:	80 b3       	in	r24, 0x10	; 16
  bc:	82 95       	swap	r24
  be:	86 95       	lsr	r24
  c0:	86 95       	lsr	r24
  c2:	83 70       	andi	r24, 0x03	; 3
  c4:	80 95       	com	r24
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	08 95       	ret

000000ca <SWITCH1OFF>:
char SWITCH1OFF(void) {return(bit_is_set(PIND,6));}
  ca:	80 b3       	in	r24, 0x10	; 16
  cc:	80 74       	andi	r24, 0x40	; 64
  ce:	08 95       	ret

000000d0 <main>:


int main(void)
{
	int i;
	sbi(DDRC,6);
  d0:	a6 9a       	sbi	0x14, 6	; 20
	sbi(DDRC,7);
  d2:	a7 9a       	sbi	0x14, 7	; 20
	sbi(PORTD,6);
  d4:	96 9a       	sbi	0x12, 6	; 18
	sei();
  d6:	78 94       	sei
	
	UART_INIT(UART_BAUD_RATE);	
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	72 ec       	ldi	r23, 0xC2	; 194
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_INIT>
#include <compat/deprecated.h>		
#include <avr/interrupt.h>

#define UART_BAUD_RATE	115200

void LED1ON(void) {sbi(PORTC,7);}
  e4:	af 9a       	sbi	0x15, 7	; 21
	
	UART_INIT(UART_BAUD_RATE);	

	LED1ON();

    UART_PRINT("\r\n\nSample code made by Robokits India for RHINO robot control board.");
  e6:	80 e6       	ldi	r24, 0x60	; 96
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 2b 01 	call	0x256	; 0x256 <UART_PRINT>
	UART_PRINT("\r\n\nVisit Us at WWW.ROBOKITS.CO.IN. ");
  ee:	85 ea       	ldi	r24, 0xA5	; 165
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 2b 01 	call	0x256	; 0x256 <UART_PRINT>

	
	while(1)
	{
		i=UART_GETCHAR();
  f6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <UART_GETCHAR>
		if(i<256)
  fa:	8f 3f       	cpi	r24, 0xFF	; 255
  fc:	91 05       	cpc	r25, r1
  fe:	09 f0       	breq	.+2      	; 0x102 <main+0x32>
 100:	d4 f7       	brge	.-12     	; 0xf6 <main+0x26>
		{
			UART_PUTCHAR(i);
 102:	0e 94 19 01 	call	0x232	; 0x232 <UART_PUTCHAR>
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <main+0x26>

00000108 <__vector_11>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 11c:	9b b1       	in	r25, 0x0b	; 11
    data = UART0_DATA;
 11e:	2c b1       	in	r18, 0x0c	; 12
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 120:	e0 91 0c 01 	lds	r30, 0x010C
 124:	ef 5f       	subi	r30, 0xFF	; 255
 126:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 128:	80 91 0d 01 	lds	r24, 0x010D
 12c:	e8 17       	cp	r30, r24
 12e:	11 f4       	brne	.+4      	; 0x134 <__vector_11+0x2c>
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	08 c0       	rjmp	.+16     	; 0x144 <__vector_11+0x3c>
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 134:	89 2f       	mov	r24, r25
 136:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 138:	e0 93 0c 01 	sts	0x010C, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e6 51       	subi	r30, 0x16	; 22
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;   
 144:	80 93 0e 01 	sts	0x010E, r24
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <__vector_12>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 16e:	90 91 0a 01 	lds	r25, 0x010A
 172:	80 91 0b 01 	lds	r24, 0x010B
 176:	98 17       	cp	r25, r24
 178:	61 f0       	breq	.+24     	; 0x192 <__vector_12+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 17a:	e0 91 0b 01 	lds	r30, 0x010B
 17e:	ef 5f       	subi	r30, 0xFF	; 255
 180:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 182:	e0 93 0b 01 	sts	0x010B, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	e6 53       	subi	r30, 0x36	; 54
 18a:	ff 4f       	sbci	r31, 0xFF	; 255
 18c:	80 81       	ld	r24, Z
 18e:	8c b9       	out	0x0c, r24	; 12
 190:	01 c0       	rjmp	.+2      	; 0x194 <__vector_12+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 192:	55 98       	cbi	0x0a, 5	; 10
    }
}
 194:	ff 91       	pop	r31
 196:	ef 91       	pop	r30
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <UART_INIT>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void UART_INIT(unsigned long baudrate)
{
 1a6:	9b 01       	movw	r18, r22
 1a8:	ac 01       	movw	r20, r24
    UART_TxHead = 0;
 1aa:	10 92 0a 01 	sts	0x010A, r1
    UART_TxTail = 0;
 1ae:	10 92 0b 01 	sts	0x010B, r1
    UART_RxHead = 0;
 1b2:	10 92 0c 01 	sts	0x010C, r1
    UART_RxTail = 0;
 1b6:	10 92 0d 01 	sts	0x010D, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
		
	UART0_STATUS = (1<<U2X);  //Enable 2x speed
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	8b b9       	out	0x0b, r24	; 11
	baudrate=((F_CPU/(8*baudrate))-1);
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	44 1f       	adc	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	d1 f7       	brne	.-12     	; 0x1c0 <UART_INIT+0x1a>
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	74 e2       	ldi	r23, 0x24	; 36
 1d0:	84 ef       	ldi	r24, 0xF4	; 244
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 38 01 	call	0x270	; 0x270 <__udivmodsi4>
 1d8:	c9 01       	movw	r24, r18
 1da:	da 01       	movw	r26, r20
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	a1 09       	sbc	r26, r1
 1e0:	b1 09       	sbc	r27, r1

    UBRRH = (unsigned char)(baudrate>>8);
 1e2:	29 2f       	mov	r18, r25
 1e4:	3a 2f       	mov	r19, r26
 1e6:	4b 2f       	mov	r20, r27
 1e8:	55 27       	eor	r21, r21
 1ea:	20 bd       	out	0x20, r18	; 32
    UBRRL = (unsigned char) baudrate;
 1ec:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 1ee:	88 e9       	ldi	r24, 0x98	; 152
 1f0:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 1f2:	86 e8       	ldi	r24, 0x86	; 134
 1f4:	80 bd       	out	0x20, r24	; 32
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* UART_INIT */
 1f6:	08 95       	ret

000001f8 <UART_GETCHAR>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 1f8:	90 91 0c 01 	lds	r25, 0x010C
 1fc:	80 91 0d 01 	lds	r24, 0x010D
 200:	98 17       	cp	r25, r24
 202:	19 f4       	brne	.+6      	; 0x20a <UART_GETCHAR+0x12>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	31 e0       	ldi	r19, 0x01	; 1
 208:	12 c0       	rjmp	.+36     	; 0x22e <UART_GETCHAR+0x36>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 20a:	e0 91 0d 01 	lds	r30, 0x010D
 20e:	ef 5f       	subi	r30, 0xFF	; 255
 210:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 212:	e0 93 0d 01 	sts	0x010D, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e6 51       	subi	r30, 0x16	; 22
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	30 81       	ld	r19, Z
    
    return (UART_LastRxError << 8) + data;
 21e:	20 91 0e 01 	lds	r18, 0x010E
 222:	92 2f       	mov	r25, r18
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	43 0f       	add	r20, r19
 22a:	51 1d       	adc	r21, r1
 22c:	9a 01       	movw	r18, r20

}/* UART_GETCHAR */
 22e:	c9 01       	movw	r24, r18
 230:	08 95       	ret

00000232 <UART_PUTCHAR>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void UART_PUTCHAR(unsigned char data)
{
 232:	28 2f       	mov	r18, r24
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 234:	90 91 0a 01 	lds	r25, 0x010A
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 23c:	80 91 0b 01 	lds	r24, 0x010B
 240:	98 17       	cp	r25, r24
 242:	e1 f3       	breq	.-8      	; 0x23c <UART_PUTCHAR+0xa>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 244:	e9 2f       	mov	r30, r25
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	e6 53       	subi	r30, 0x36	; 54
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 24e:	90 93 0a 01 	sts	0x010A, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 252:	55 9a       	sbi	0x0a, 5	; 10

}/* UART_PUTCHAR */
 254:	08 95       	ret

00000256 <UART_PRINT>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void UART_PRINT(const char *s )
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	ec 01       	movw	r28, r24
 25c:	03 c0       	rjmp	.+6      	; 0x264 <UART_PRINT+0xe>
    while (*s) 
      UART_PUTCHAR(*s++);
 25e:	21 96       	adiw	r28, 0x01	; 1
 260:	0e 94 19 01 	call	0x232	; 0x232 <UART_PUTCHAR>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void UART_PRINT(const char *s )
{
    while (*s) 
 264:	88 81       	ld	r24, Y
 266:	88 23       	and	r24, r24
 268:	d1 f7       	brne	.-12     	; 0x25e <UART_PRINT+0x8>
      UART_PUTCHAR(*s++);

}/* UART_PRINT */
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <__udivmodsi4>:
 270:	a1 e2       	ldi	r26, 0x21	; 33
 272:	1a 2e       	mov	r1, r26
 274:	aa 1b       	sub	r26, r26
 276:	bb 1b       	sub	r27, r27
 278:	fd 01       	movw	r30, r26
 27a:	0d c0       	rjmp	.+26     	; 0x296 <__udivmodsi4_ep>

0000027c <__udivmodsi4_loop>:
 27c:	aa 1f       	adc	r26, r26
 27e:	bb 1f       	adc	r27, r27
 280:	ee 1f       	adc	r30, r30
 282:	ff 1f       	adc	r31, r31
 284:	a2 17       	cp	r26, r18
 286:	b3 07       	cpc	r27, r19
 288:	e4 07       	cpc	r30, r20
 28a:	f5 07       	cpc	r31, r21
 28c:	20 f0       	brcs	.+8      	; 0x296 <__udivmodsi4_ep>
 28e:	a2 1b       	sub	r26, r18
 290:	b3 0b       	sbc	r27, r19
 292:	e4 0b       	sbc	r30, r20
 294:	f5 0b       	sbc	r31, r21

00000296 <__udivmodsi4_ep>:
 296:	66 1f       	adc	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	88 1f       	adc	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	1a 94       	dec	r1
 2a0:	69 f7       	brne	.-38     	; 0x27c <__udivmodsi4_loop>
 2a2:	60 95       	com	r22
 2a4:	70 95       	com	r23
 2a6:	80 95       	com	r24
 2a8:	90 95       	com	r25
 2aa:	9b 01       	movw	r18, r22
 2ac:	ac 01       	movw	r20, r24
 2ae:	bd 01       	movw	r22, r26
 2b0:	cf 01       	movw	r24, r30
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
